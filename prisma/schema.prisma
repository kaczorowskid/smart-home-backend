generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DeviceType {
  THERMOMETER
  BLIND
}

enum PermissionType {
  IS_ADMIN
  DASHBOARD_VIEW
  GRAPHS_VIEW
  ROOMS_VIEW
  OPTIONS_VIEW
  OPTIONS_VIEW_DEVICES
  OPTIONS_ADD_DEVICE
  OPTIONS_UPDATE_DEVICE
  OPTIONS_DELETE_DEVICE
  OPTIONS_VIEW_ROOMS
  OPTIONS_ADD_ROOM
  OPTIONS_UPDATE_ROOM
  OPTIONS_DELETE_ROOM
  OPTIONS_VIEW_USERS
  OPTIONS_ADD_USER
  OPTIONS_UPDATE_USER
  OPTIONS_DELETE_USER
  OPTIONS_VIEW_ROLES
  OPTIONS_ADD_ROLE
  OPTIONS_UPDATE_ROLE
  OPTIONS_DELETE_ROLE
  SETTINGS_VIEW
}

enum RoomType {
  BACKYARD
  BATHROOM
  BEDROOM
  KITCHEN
  LIVINGROOM
}

model Thermometer {
  id        String               @id @default(uuid())
  name      String
  deviceId  String               @unique
  type      DeviceType           @default(THERMOMETER)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  data      ThermometerData[]
  rooms     RoomOnThermometers[]
}

model ThermometerData {
  id          String      @id @default(uuid())
  temperature Float
  humidity    Float
  date        DateTime
  battery     Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Thermometer Thermometer @relation(fields: [deviceId], references: [deviceId])
  deviceId    String
}

model Blind {
  id        String         @id @default(uuid())
  name      String
  value     Int?           @default(0)
  deviceId  String         @unique
  type      DeviceType     @default(BLIND)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  rooms     RoomOnBlinds[]
}

model User {
  id           String   @id @default(uuid())
  name         String
  surname      String
  email        String   @unique
  password     String
  isVerified   Boolean  @default(false)
  refreshToken String?
  roleId       String
  role         Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Role {
  id          String               @id @default(uuid())
  name        String               @unique
  permissions RolePermissionLink[]
  User        User[]
}

model RolePermissionLink {
  id         String         @id @default(uuid())
  roleId     String
  permission PermissionType

  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permission])
}

model Room {
  id           String               @id @default(uuid())
  name         String
  roomType     RoomType
  thermometers RoomOnThermometers[]
  blinds       RoomOnBlinds[]
}

model RoomOnThermometers {
  roomId        String
  thermometerId String
  room          Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)
  thermometer   Thermometer @relation(fields: [thermometerId], references: [id], onDelete: Cascade)

  @@id([roomId, thermometerId])
}

model RoomOnBlinds {
  roomId  String
  blindId String
  room    Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  blind   Blind  @relation(fields: [blindId], references: [id], onDelete: Cascade)

  @@id([roomId, blindId])
}
